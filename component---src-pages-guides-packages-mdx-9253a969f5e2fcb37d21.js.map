{"version":3,"sources":["webpack://nulogy.design/./src/pages/guides/packages.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oPAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,yBACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,uEACA,mGACA,mBACE,cAAIC,WAAW,MAAf,gCACA,cAAIA,WAAW,MAAf,kFACA,cAAIA,WAAW,MAAf,+DAEF,yDACA,mBACE,cAAIA,WAAW,MAAf,oCACA,cAAIA,WAAW,MAAf,qBACA,cAAIA,WAAW,MAAf,oBAEF,2CACA,kBAAG,2BAAGA,WAAW,KAAQ,CACrB,KAAQ,yCADT,wBAAH,0HAE2J,sBAAYA,WAAW,KAAvB,gCAF3J,iDAEoR,sBAAYA,WAAW,KAAvB,sCAFpR,8GAEgd,sBAAYA,WAAW,KAAvB,SAFhd,MAEugB,sBAAYA,WAAW,KAAvB,SAFvgB,UAEkkB,sBAAYA,WAAW,KAAvB,SAFlkB,6FAGA,uCACA,uDAAyC,2BAAGA,WAAW,KAAQ,CAC3D,KAAQ,yDAD6B,oBAAzC,qEAGA,mBACE,cAAIA,WAAW,MAAf,yCACA,cAAIA,WAAW,MAAf,kCACA,cAAIA,WAAW,MAAf,kCAEF,wSACA,qCACA,2CACA,oBAAK,8BAAMA,WAAW,OAAU,IAA3B,uCAEL,kBAAG,cAAIA,WAAW,KAAf,0GAA6H,sBAAYA,WAAW,MAAvB,WAA7H,QAAyL,sBAAYA,WAAW,MAAvB,gBAAzL,uBAAyQ,sBAAYA,WAAW,MAAvB,SAAzQ,0CACH,kCACA,8KACA,mBACE,cAAIA,WAAW,OAAK,2BAAGA,WAAW,MAAS,CACvC,KAAQ,wDADQ,qCAApB,uFAGA,cAAIA,WAAW,OAAK,2BAAGA,WAAW,MAAS,CACvC,KAAQ,gEADQ,6CAApB,4DAGA,cAAIA,WAAW,OAAK,2BAAGA,WAAW,MAAS,CACvC,KAAQ,kDADQ,+BAApB,4BAEoE,sBAAYA,WAAW,MAAvB,gBAFpE,qCAGA,cAAIA,WAAW,OAAK,2BAAGA,WAAW,MAAS,CACvC,KAAQ,4CADQ,yBAApB,oDAGA,cAAIA,WAAW,OAAK,2BAAGA,WAAW,MAAS,CACvC,KAAQ,+CADQ,4BAApB,0CAGA,cAAIA,WAAW,OAAK,2BAAGA,WAAW,MAAS,CACvC,KAAQ,4CADQ,yBAApB,qCAIF,kDACA,oBAAK,8BAAMA,WAAW,OAAU,IAA3B,uLAIL,yEAA2D,sBAAYA,WAAW,KAAvB,mBAA3D,+CACA,oBAAK,8BAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6PAaL,mFACA,qCACA,kBAAG,2BAAGA,WAAW,KAAQ,CACrB,KAAQ,wCADT,kBAAH,gIAGA,qCACA,wJAA0I,sBAAYA,WAAW,KAAvB,aAA1I,MACA,mCACA,uCAAyB,sBAAYA,WAAW,KAAvB,kCAAzB,mGACA,oBAAK,8BAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,inBA8BL,kIACA,8DAAgD,2BAAGA,WAAW,KAAQ,CAClE,KAAQ,gDADoC,+CAAhD,MAOJJ,EAAWK,gBAAiB","file":"component---src-pages-guides-packages-mdx-9253a969f5e2fcb37d21.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nulogy.design/nulogy.design/src/components/MarkdownRenderer.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`How the Nulogy Design Ops team releases packages`}</h1>\n    <p>{`When we set out to design our release solution, we had several goals in mind:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Follow an existing standard`}</li>\n      <li parentName=\"ul\">{`Create and release packages based on that standard without human intervention`}</li>\n      <li parentName=\"ul\">{`Provide our developers access to code as fast as possible`}</li>\n    </ul>\n    <p>{`To accomplish these goals, we used:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Semver and Conventional Commits`}</li>\n      <li parentName=\"ul\">{`semantic-release`}</li>\n      <li parentName=\"ul\">{`Github Actions`}</li>\n    </ul>\n    <h3>{`Conventional Commits`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.conventionalcommits.org/\"\n      }}>{`Conventional Commits`}</a>{` is a specification for adding human and machine readable meaning to commit messages. For example, instead of writing `}<inlineCode parentName=\"p\">{`added a Datepicker component`}</inlineCode>{`, following Conventional Commits you’d write `}<inlineCode parentName=\"p\">{`feat: added a Datepicker component`}</inlineCode>{`. A commit can be designated a fix, feature, and/or a breaking change, which will correlate with Semver's `}<inlineCode parentName=\"p\">{`patch`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`minor`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`major`}</inlineCode>{` changes. This allows tooling to be built to automatically version and release packages.`}</p>\n    <h3>{`semantic-release`}</h3>\n    <p>{`The tooling we’re using is called `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/semantic-release/semantic-release\"\n      }}>{`semantic-release`}</a>{`, which “automates the whole package release workflow including:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`determining the next version number,`}</li>\n      <li parentName=\"ul\">{`generating the release notes,`}</li>\n      <li parentName=\"ul\">{`and publishing the package.”`}</li>\n    </ul>\n    <p>{`After ensuring commit messages are written with Conventional Commits, it’s possible to automatically package and release software through Continous Integration on every merge to master. This ensures your consumers are getting access to changes literally as fast as possible.`}</p>\n    <p>{`To set this up:`}</p>\n    <h4>{`Add semantic-release`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`yarn add semantic-release --dev\n`}</code></pre>\n    <p><em parentName=\"p\">{`Since semantic-release uses git tags and npm to decide on the package version, you'll want to set the `}<inlineCode parentName=\"em\">{`version`}</inlineCode>{` in `}<inlineCode parentName=\"em\">{`package.json`}</inlineCode>{` to something like `}<inlineCode parentName=\"em\">{`0.0.0`}</inlineCode>{` to discourage manually updating it.`}</em></p>\n    <h4>{`Add plugins`}</h4>\n    <p>{`semantic-release can do a lot of things, so it's made up of opt-in plugins. We'd like it to do everything, so we'll use the following plugins, in order:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/semantic-release/commit-analyzer\"\n        }}>{`@semantic-release/commit-analyzer`}</a>{` to look through the commit message and decide what kind of change is being added.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/semantic-release/release-notes-generator\"\n        }}>{`@semantic-release/release-notes-generator`}</a>{` to generate release notes based on the commit message.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/semantic-release/changelog\"\n        }}>{`@semantic-release/changelog`}</a>{` to update a persistant `}<inlineCode parentName=\"li\">{`CHANGELOG.md`}</inlineCode>{` file using those release notes.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/semantic-release/git\"\n        }}>{`@semantic-release/git`}</a>{` to commit the changelog to the git repository.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/semantic-release/github\"\n        }}>{`@semantic-release/github`}</a>{` to tag and publish a Github release.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/semantic-release/npm\"\n        }}>{`@semantic-release/npm`}</a>{` to publish the package to npm.`}</li>\n    </ul>\n    <p>{`These can all be added with:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`yarn add --dev @semantic-release/changelog @semantic-release/commit-analyzer\n@semantic-release/changelog @semantic-release/git @semantic-release/github\n@semantic-release/npm\n`}</code></pre>\n    <p>{`Then tell semantic-release to use them, by adding a `}<inlineCode parentName=\"p\">{`.releaserc.json`}</inlineCode>{` to the root directory with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    \"@semantic-release/changelog\",\n    \"@semantic-release/git\",\n    \"@semantic-release/github\",\n    \"@semantic-release/npm\"\n  ]\n}\n`}</code></pre>\n    <p>{`Now that it's intsalled, we can run it on CI after our build.`}</p>\n    <h3>{`Github Actions`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/features/actions\"\n      }}>{`Github Actions`}</a>{` is Github’s free Continous Integration service and will allow us to run semantic-release automatically on merge to master.`}</p>\n    <h4>{`Add secret key`}</h4>\n    <p>{`Generate an NPM secret key from your NPM account settings. Then go to the Settings > Secrets page in Github and add a token called `}<inlineCode parentName=\"p\">{`NPM_TOKEN`}</inlineCode>{`.`}</p>\n    <h4>{`Add workflow`}</h4>\n    <p>{`Add a file called `}<inlineCode parentName=\"p\">{`/.github/workflows/release.yml`}</inlineCode>{` with the following, replacing the command in the Build step with your relevant build command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`name: Release\non:\n  push:\n    branches:\n      - master\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-18.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n      - name: Setup Node.js\n        uses: actions/setup-node@v1\n        with:\n          node-version: 12\n      - name: Install dependencies\n        run: yarn\n      - name: Build\n        run: yarn build\n      - name: Release\n        env:\n          GITHUB_TOKEN: \\${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: \\${{ secrets.NPM_TOKEN }}\n        run: npx semantic-release\n`}</code></pre>\n    <p>{`That's it. Automated releases with changelogs published on every merge to master with no human intervention.`}</p>\n    <p>{`A test repo of this code can be found at `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/nulogy/nds-test-releases\"\n      }}>{`https://github.com/nulogy/nds-test-releases`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}