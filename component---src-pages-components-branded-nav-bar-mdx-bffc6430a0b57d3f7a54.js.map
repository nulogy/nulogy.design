{"version":3,"sources":["webpack://nulogy.design/./src/pages/components/branded-nav-bar.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","Playground","PropsTable","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","config","propsConfig","primaryMenu","type","PropTypes","value","description","secondaryMenu","parentName","ariaLabel","href","items","render","isMDXComponent"],"mappings":"oRAWaA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,cAASC,KAGZG,EAAaL,EAAc,cAC3BM,EAAaN,EAAc,cAC3BO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGT,GACF,yBACD,OAAO,QAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,eAI5E,oCACA,2FACA,QAACP,EAAD,iBAAgBQ,IAAhB,CAAwBD,QAAQ,iBAChC,4BACA,QAACN,EAAD,CAAYQ,YAAaD,UAAcD,QAAQ,gBAC/C,0CACA,wKACA,QAACN,EAAD,CAAYQ,YAAa,CACvBC,YAAa,CACXC,KAAMC,UACNC,MAAO,GACPC,YAAa,wEAEfC,cAAe,CACbJ,KAAMC,UACNC,MAAO,GACPC,YAAa,+EAEdP,QAAQ,gBACX,wCACA,uLACA,oBAAK,8BAAMS,WAAW,OAAU,CAC5B,UAAa,iBADZ,uKAWL,oPACA,mIACA,QAACf,EAAD,CAAYQ,YAAa,CACvBb,KAAM,CACJe,KAAMC,cACNC,MAAO,GACPC,YAAa,wCAEfG,UAAW,CACTN,KAAMC,WACNC,MAAO,GACPC,YAAa,gFAEfI,KAAM,CACJP,KAAMC,WACNC,MAAO,GACPC,YAAa,6HAEfK,MAAO,CACLR,KAAMC,UACNC,MAAO,GACPC,YAAa,iIAEfM,OAAQ,CACNT,KAAMC,aACNC,MAAO,GACPC,YAAa,iQAEdP,QAAQ,gBACX,yCACA,mBACE,cAAIS,WAAW,OAAK,2BAAGA,WAAW,MAAS,CACvC,KAAQ,qBADQ,UAGpB,cAAIA,WAAW,OAAK,2BAAGA,WAAW,MAAS,CACvC,KAAQ,kCADQ,uBAQ1BX,EAAWgB,gBAAiB","file":"component---src-pages-components-branded-nav-bar-mdx-bffc6430a0b57d3f7a54.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nulogy.design/nulogy.design/src/components/MarkdownRenderer.js\";\nimport { BrandedNavBar } from \"@nulogy/components\";\nimport { PropTypes } from \"react-view\";\nimport { config } from \"../../playgrounds/branded-nav-bar\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Playground = makeShortcode(\"Playground\");\nconst PropsTable = makeShortcode(\"PropsTable\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>{`BrandedNavBar`}</h1>\n    <p>{`A light navigation bar that can optionally support a customer's logo.`}</p>\n    <Playground {...config} mdxType=\"Playground\" />\n    <h2>{`Props`}</h2>\n    <PropsTable propsConfig={config.props} mdxType=\"PropsTable\" />\n    <h2>{`MenuData PropsTable`}</h2>\n    <p>{`The menuData prop is used to provide links to the NavBar and assemble their heirarchy. The direct children in the menuData object are shown below:`}</p>\n    <PropsTable propsConfig={{\n      primaryMenu: {\n        type: PropTypes.Array,\n        value: \"\",\n        description: \"Data to the main navigation menu, aligned to the left of the NavBar.\"\n      },\n      secondaryMenu: {\n        type: PropTypes.Array,\n        value: \"\",\n        description: \"Data to the secondary navigation menu, aligned to the right of the NavBar.\"\n      }\n    }} mdxType=\"PropsTable\" />\n    <h2>{`Adding Menu Items`}</h2>\n    <p>{`Both primaryMenu and secondaryMenu expect an array of objects. Each object represents a link or a heading to a group of links under it, with the following shape:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const primaryMenu = [\n  {\n    name = \"string\",\n    href = \"/\",      // optional\n    render = ()=>(), // optional\n    items = [],      // optional\n  },\n]\n`}</code></pre>\n    <p>{`Each menu item object requires a \"name\" key. The \"name\" key will be used as the label for the menu item unless a \"render\" key is used. Adding \"items\" to the menu item object will render a dropdown with the specified items.`}</p>\n    <p>{`Menu items can be nested within eachother using the items key for as many levels of heirarchy that is needed.`}</p>\n    <PropsTable propsConfig={{\n      name: {\n        type: PropTypes.ReactNode,\n        value: \"\",\n        description: \"Unique identifier for the menu item.\"\n      },\n      ariaLabel: {\n        type: PropTypes.String,\n        value: \"\",\n        description: \"Add an aria-label if the `name` value is not a readable label, like an icon.\"\n      },\n      href: {\n        type: PropTypes.String,\n        value: \"\",\n        description: \"URL or link to an element similar to a standard <a> tag, this causes the menu item to render as a link within the NavBar.\"\n      },\n      items: {\n        type: PropTypes.Array,\n        value: \"\",\n        description: \"Array of menu item objects. This causes the menu item to render as a dropdown in desktop view or as a heading in mobile view.\"\n      },\n      render: {\n        type: PropTypes.Function,\n        value: \"\",\n        description: \"Function that returns JSX. This causes the menu item to render as the JSX provided wrapped in a component that provides styling and an onClick handler to close the menu. NOTE: Do not use `href` and `items` keys if you intend to use the render function.\"\n      }\n    }} mdxType=\"PropsTable\" />\n    <h2>{`Related Components`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/page\"\n        }}>{`Page`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/application-frame\"\n        }}>{`ApplicationFrame`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}