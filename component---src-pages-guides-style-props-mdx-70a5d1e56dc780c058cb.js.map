{"version":3,"sources":["webpack://nulogy.design/./src/pages/guides/style-props.mdx"],"names":["name","_frontmatter","Alert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","href","isMDXComponent"],"mappings":"wMAWsBA,E,sDAFTC,EAAe,GAOtBC,GALgBF,EAKM,QALE,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,cAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,yBACD,OAAO,QAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAI5E,kCACA,sOACA,sCACA,sBACE,iBAAOC,WAAW,UAChB,cAAIA,WAAW,UACb,4BAAIA,WAAW,MAAS,CACtB,MAAS,OADX,aAGA,4BAAIA,WAAW,MAAS,CACtB,MAAS,OADX,YAKJ,iBAAOA,WAAW,UAChB,cAAIA,WAAW,UACb,4BAAIA,WAAW,MAAS,CACtB,MAAS,QACR,sBAAYA,WAAW,MAAvB,WACH,4BAAIA,WAAW,MAAS,CACtB,MAAS,OADX,0NAIF,cAAIA,WAAW,UACb,4BAAIA,WAAW,MAAS,CACtB,MAAS,QACR,sBAAYA,WAAW,MAAvB,YACH,4BAAIA,WAAW,MAAS,CACtB,MAAS,OADX,2FAIF,cAAIA,WAAW,UACb,4BAAIA,WAAW,MAAS,CACtB,MAAS,QACR,sBAAYA,WAAW,MAAvB,gBACH,4BAAIA,WAAW,MAAS,CACtB,MAAS,OADX,uFAIF,cAAIA,WAAW,UACb,4BAAIA,WAAW,MAAS,CACtB,MAAS,QACR,sBAAYA,WAAW,MAAvB,YACH,4BAAIA,WAAW,MAAS,CACtB,MAAS,OADX,gCAIF,cAAIA,WAAW,UACb,4BAAIA,WAAW,MAAS,CACtB,MAAS,QACR,sBAAYA,WAAW,MAAvB,YACH,4BAAIA,WAAW,MAAS,CACtB,MAAS,OADX,sIAIF,cAAIA,WAAW,UACb,4BAAIA,WAAW,MAAS,CACtB,MAAS,QACR,sBAAYA,WAAW,MAAvB,cACH,4BAAIA,WAAW,MAAS,CACtB,MAAS,OADX,kDAMN,0EAA4D,2BAAGA,WAAW,KAAQ,CAC9E,KAAQ,6EADgD,sBAA5D,MAGA,4BACA,gJACA,mBACE,cAAIA,WAAW,MAAf,sFACA,cAAIA,WAAW,MAAf,4FACA,cAAIA,WAAW,MAAf,2HAEF,QAACV,EAAD,CAAOS,QAAQ,SAAf,qLAG2B,KAC7B,QAAC,KAAD,CAAME,KAAK,wCAAwCF,QAAQ,QAA3D,QAJE,gBAMA,4BACA,kDAAoC,2BAAGC,WAAW,KAAQ,CACtD,KAAQ,WADwB,SAApC,kDAEoE,sBAAYA,WAAW,KAAvB,aAFpE,QAEiI,sBAAYA,WAAW,KAAvB,QAFjI,2BAE4M,sBAAYA,WAAW,KAAvB,WAF5M,iGAOJH,EAAWK,gBAAiB","file":"component---src-pages-guides-style-props-mdx-70a5d1e56dc780c058cb.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nulogy.design/nulogy.design/src/components/MarkdownRenderer.js\";\nimport { Link } from \"@nulogy/components\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Alert = makeShortcode(\"Alert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>{`Style Props`}</h1>\n    <p>{`Nulogy's components use styled-system to apply groups of style props to different types of components. These props correspond to their css equivalents and allow individual manipulation of a component's style.`}</p>\n    <h2>{`Prop categories`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Category`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Props`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`space`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`margin, marginTop, marginRight, marginBottom, marginLeft, marginX, marginY, padding, paddingTop, paddingRight, paddingBottom, paddingLeft, paddingX, paddingY, m, mt, mr, mb, ml, mx, my, p, pt, pr, pb, pl, px, py,`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`layout`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`width, height, minWidth, minHeight, maxWidth, maxHeight, display, verticalAlign, size`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`typography`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`fontFamily, fontSize, fontWeight, lineHeight, letterSpacing, fontStyle, textAlign`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`colour`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`color, backgroundColor, bg`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`border`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`border, borderWidth, borderStyle, borderColor, borderRadius, borderTop, borderRight, borderBottom, borderLeft, borderX, borderY,`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`position`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`position, zIndex, top, right, bottom, left`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`For more information on each of these props, see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/styled-system/styled-system/blob/master/docs/table.md\"\n      }}>{`styled-system docs`}</a>{`.`}</p>\n    <h2>{`Usage`}</h2>\n    <p>{`To see which props each component includes, see that component's documentation. But in general, the following rules apply:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Block-level components (Alerts, Buttons, Cards, etc.) have access to space props.`}</li>\n      <li parentName=\"ul\">{`Text components (Text, Headings, Link) also have access to typography and colour props.`}</li>\n      <li parentName=\"ul\">{`The Box component has access to layout props and can be used to add borders, colours, and boxShadows around anything.`}</li>\n    </ul>\n    <Alert mdxType=\"Alert\">\n  Note that inputs don't have access to any of these props because they're\n  already pre-composed. To stack multiple inputs with proper spacing on top of\n  each other, wrap them in the{\" \"}\n  <Link href=\"https://nulogy.design/components/form\" mdxType=\"Link\">Form</Link> component.\n    </Alert>\n    <h2>{`Theme`}</h2>\n    <p>{`Styled-system will check the `}<a parentName=\"p\" {...{\n        \"href\": \"/theme\"\n      }}>{`theme`}</a>{` and use that if a key matches, e.g setting a `}<inlineCode parentName=\"p\">{`textColor`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`blue`}</inlineCode>{` will display Nulogy's `}<inlineCode parentName=\"p\">{`#216beb`}</inlineCode>{`, instead of the html default. If a key can't be found, it will be processed as a CSS value.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}