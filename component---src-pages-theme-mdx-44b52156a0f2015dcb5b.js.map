{"version":3,"sources":["webpack://nulogy.design/./src/pages/theme.mdx"],"names":["name","_frontmatter","Alert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","className","JSON","stringify","theme","parentName","fontSize","mt","isMDXComponent"],"mappings":"uMAYsBA,E,iEAFTC,EAAe,GAOtBC,GALgBF,EAKM,QALE,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,cAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,yBACD,OAAO,QAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAI5E,4BACA,6IACA,QAAC,IAAD,CAAWA,QAAQ,cACrB,eAAKC,UAAU,iBAAiBC,KAAKC,UAAUC,KAAO,KAAM,SAE1D,4BACA,6FAA+E,2BAAGC,WAAW,KAAQ,CACjG,KAAQ,oBADmE,OAA/E,OAEuB,sBAAYA,WAAW,KAAvB,mBAFvB,0BAE4G,sBAAYA,WAAW,KAAvB,WAF5G,uCAEsM,2BAAGA,WAAW,KAAQ,CACxN,KAAQ,qBAD0L,QAFtM,iBAIkC,sBAAYA,WAAW,KAAvB,aAJlC,8BAIqH,sBAAYA,WAAW,KAAvB,aAJrH,kBAKA,oCACA,sJACA,6LACA,oBAAK,8BAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yIAQL,QAACd,EAAD,CAAOe,SAAS,OAAOC,GAAG,KAAKP,QAAQ,SAAvC,iOASJF,EAAWU,gBAAiB","file":"component---src-pages-theme-mdx-44b52156a0f2015dcb5b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nulogy.design/nulogy.design/src/components/MarkdownRenderer.js\";\nimport { theme } from \"@nulogy/components\";\nimport CodeBlock from \"../components/CodeBlock.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Alert = makeShortcode(\"Alert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>{`Theme`}</h1>\n    <p>{`All the available design options for creating interfaces in Nulogy's style can be accessed in Javascript via the theme.`}</p>\n    <CodeBlock mdxType=\"CodeBlock\">\n  <div className=\"language-json\">{JSON.stringify(theme, null, \"  \")}</div>\n    </CodeBlock>\n    <h2>{`Usage`}</h2>\n    <p>{`The theme can be accessed via our building block component props. E.g a `}<a parentName=\"p\" {...{\n        \"href\": \"/components/box\"\n      }}>{`Box`}</a>{`'s `}<inlineCode parentName=\"p\">{`backgroundColor`}</inlineCode>{` prop will map to the `}<inlineCode parentName=\"p\">{`colours`}</inlineCode>{` object in our theme. Similarly, a `}<a parentName=\"p\" {...{\n        \"href\": \"/components/Text\"\n      }}>{`Text`}</a>{` component's `}<inlineCode parentName=\"p\">{`fontSizes`}</inlineCode>{` property will map to the `}<inlineCode parentName=\"p\">{`fontSizes`}</inlineCode>{` object, etc.`}</p>\n    <h2>{`Custom themes`}</h2>\n    <p>{`As of version 3.0, themes can be overriden at the NDSProvider level. This allows changing all definitions of a property at once.`}</p>\n    <p>{`For example, if you were working in one of our legacy Operational Solution modules and wanted the \"medium\" font size used in all components to be 14px instead of 16px:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { NDSProvider } from \"@nulogy/components\"\n\n<NDSProvider theme={fontSizes: {medium: \"14px\"}}>\n    // app\n</NDSProvider>\n`}</code></pre>\n    <Alert fontSize=\"20px\" mt=\"x4\" mdxType=\"Alert\">\n  This is a powerful feature, but should be used sparingly. Please let Design\n  Ops know when you've overriden the theme for any reason, in case there are\n  systemic problems we could be solving in the system directly instead.\n    </Alert>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}